<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * 관리자 감사 로그 테이블 생성
     *
     * 이 테이블은 관리자의 모든 CRUD 작업을 추적하는 감사 로그를 저장합니다.
     * 데이터 무결성, 보안 감사, 규정 준수 등을 위한 상세한 변경 이력을 관리합니다.
     *
     * 도메인 지식:
     * - 관리자 활동 추적: 누가 언제 어떤 작업을 수행했는지 기록
     * - 데이터 변경 이력: 변경 전후 값을 비교하여 무결성 보장
     * - 보안 감사: IP 주소, 사용자 에이전트 등 보안 관련 정보 수집
     * - 규정 준수: 법적 요구사항 충족을 위한 상세한 활동 이력
     * - 문제 해결: 시스템 문제 발생 시 원인 분석을 위한 데이터 제공
     * - 성능 모니터링: 관리자 활동 패턴 분석을 통한 시스템 최적화
     *
     * 비즈니스 규칙:
     * - 모든 중요 관리자 활동의 상세 로그 기록
     * - 데이터 변경 전후 값 비교 저장
     * - 심각도별 로그 분류로 우선순위 관리
     * - IP 주소 및 사용자 에이전트 정보 보존
     * - JSON 형태의 추가 데이터 저장으로 유연성 확보
     * - 실시간 모니터링 및 알림 연동 지원
     */
    public function up(): void
    {
        Schema::create('admin_audit_logs', function (Blueprint $table) {
            $table->id();

            /**
             * 관리자 ID
             *
             * 관리자 감사 로그의 핵심 식별자로, 어떤 관리자가 작업을 수행했는지 기록합니다.
             * admin_emails 테이블의 id를 참조하여 관리자 정보를 연결합니다.
             *
             * 도메인 지식:
             * - 관리자 책임성: 각 작업의 수행자를 명확히 식별
             * - 권한 추적: 관리자별 권한 사용 패턴 분석 가능
             * - 보안 감사: 비정상적인 관리자 활동 탐지
             * - 성과 평가: 관리자별 작업 효율성 분석
             */
            $table->unsignedBigInteger('admin_id')->comment('관리자 ID (admin_emails 테이블 참조)');

            /**
             * 수행된 액션
             *
             * 관리자가 수행한 작업의 유형을 기록합니다.
             * 시스템에서 정의된 표준 액션 타입을 사용합니다.
             *
             * 액션 타입:
             * - create: 새로운 레코드 생성
             * - update: 기존 레코드 수정
             * - delete: 레코드 삭제
             * - bulk_delete: 대량 삭제 작업
             * - bulk_update: 대량 수정 작업
             * - activate: 레코드 활성화
             * - deactivate: 레코드 비활성화
             * - approve: 승인 작업
             * - reject: 거부 작업
             * - export: 데이터 내보내기
             * - import: 데이터 가져오기
             * - login: 로그인
             * - logout: 로그아웃
             *
             * 도메인 지식:
             * - 작업 분류: 액션별 통계 및 분석 가능
             * - 위험도 평가: 삭제, 대량 작업 등 위험한 액션 식별
             * - 워크플로우 추적: 승인/거부 등 비즈니스 프로세스 모니터링
             * - 사용 패턴: 관리자별 선호 액션 분석
             */
            $table->string('action')->comment('수행된 액션 (create, update, delete, bulk_delete, etc.)');

            /**
             * 대상 테이블명
             *
             * 작업이 수행된 데이터베이스 테이블명을 기록합니다.
             * 시스템의 어떤 테이블이 영향을 받았는지 추적합니다.
             *
             * 도메인 지식:
             * - 영향 범위 추적: 특정 테이블의 변경 이력 분석
             * - 데이터 무결성: 테이블별 데이터 변경 패턴 모니터링
             * - 성능 분석: 자주 변경되는 테이블 식별
             * - 보안 감사: 중요 테이블의 접근 패턴 분석
             * - 규정 준수: 특정 테이블의 변경 이력 요구사항 충족
             */
            $table->string('table_name')->nullable()->comment('대상 테이블명');

            /**
             * 대상 레코드 ID
             *
             * 작업이 수행된 특정 레코드의 ID를 기록합니다.
             * 개별 레코드의 변경 이력을 추적할 수 있습니다.
             *
             * 도메인 지식:
             * - 개별 추적: 특정 레코드의 전체 변경 이력 조회
             * - 데이터 복구: 삭제된 레코드의 이전 상태 복원 가능
             * - 감사 추적: 중요 레코드의 모든 변경 사항 기록
             * - 문제 해결: 특정 레코드 관련 문제의 원인 분석
             */
            $table->unsignedBigInteger('record_id')->nullable()->comment('대상 레코드 ID');

            /**
             * 변경 전 값들 (JSON)
             *
             * 레코드가 변경되기 전의 원본 값을 JSON 형태로 저장합니다.
             * 데이터 변경의 정확한 이력을 보존합니다.
             *
             * 도메인 지식:
             * - 변경 이력: 정확한 변경 사항 추적
             * - 데이터 복구: 실수로 변경된 데이터의 원상 복구
             * - 감사 추적: 규정 준수를 위한 상세한 변경 이력
             * - 문제 분석: 데이터 변경으로 인한 문제의 원인 파악
             * - 무결성 검증: 데이터 변경의 정당성 확인
             */
            $table->json('old_values')->nullable()->comment('변경 전 값들');

            /**
             * 변경 후 값들 (JSON)
             *
             * 레코드가 변경된 후의 새로운 값을 JSON 형태로 저장합니다.
             * 데이터 변경의 결과를 정확히 기록합니다.
             *
             * 도메인 지식:
             * - 변경 결과: 정확한 변경 사항 확인
             * - 데이터 검증: 변경된 데이터의 정확성 검증
             * - 감사 추적: 변경 사항의 완전한 기록
             * - 문제 해결: 변경으로 인한 문제의 영향 범위 분석
             */
            $table->json('new_values')->nullable()->comment('변경 후 값들');

            /**
             * IP 주소
             *
             * 관리자 작업을 수행한 클라이언트의 IP 주소를 기록합니다.
             * 보안 감사 및 이상 행동 탐지에 활용됩니다.
             *
             * 도메인 지식:
             * - 보안 감사: 비정상적인 IP에서의 접근 탐지
             * - 지리적 분석: 관리자 활동의 지리적 분포 분석
             * - 네트워크 보안: 허가되지 않은 네트워크에서의 접근 탐지
             * - 세션 관리: 동일 IP의 연속 작업 패턴 분석
             * - 위험 평가: 알려진 위험 IP에서의 접근 모니터링
             */
            $table->string('ip_address')->nullable()->comment('IP 주소');

            /**
             * 사용자 에이전트
             *
             * 관리자가 사용한 브라우저, 운영체제, 디바이스 정보를 기록합니다.
             * 보안 및 사용성 분석에 활용됩니다.
             *
             * 도메인 지식:
             * - 디바이스 분석: 관리자별 선호 디바이스 패턴
             * - 보안 감사: 비정상적인 디바이스에서의 접근 탐지
             * - 사용성 개선: 브라우저별 호환성 문제 식별
             * - 세션 관리: 동일 디바이스의 연속 작업 추적
             * - 위험 평가: 알려진 취약한 브라우저/OS 사용 탐지
             */
            $table->text('user_agent')->nullable()->comment('사용자 에이전트');

            /**
             * 상세 설명
             *
             * 수행된 작업에 대한 사람이 읽을 수 있는 상세한 설명을 기록합니다.
             * 로그의 의미를 명확히 전달합니다.
             *
             * 도메인 지식:
             * - 작업 이해: 로그의 목적과 결과를 명확히 전달
             * - 감사 추적: 규정 준수를 위한 상세한 작업 설명
             * - 문제 해결: 작업의 맥락과 의도를 파악
             * - 교육 자료: 새로운 관리자의 학습 자료로 활용
             * - 커뮤니케이션: 이해관계자와의 소통 도구
             */
            $table->text('description')->nullable()->comment('상세 설명');

            /**
             * 추가 메타데이터 (JSON)
             *
             * 작업과 관련된 추가 정보를 JSON 형태로 저장합니다.
             * 유연한 데이터 저장으로 향후 확장성을 보장합니다.
             *
             * 도메인 지식:
             * - 확장성: 새로운 정보 요구사항에 대한 유연한 대응
             * - 상세 정보: 작업과 관련된 모든 추가 정보 보존
             * - 분석 도구: 다양한 분석 도구와의 연동 지원
             * - 커스터마이징: 조직별 특수 요구사항 충족
             * - 미래 대응: 향후 새로운 감사 요구사항 대응
             */
            $table->json('metadata')->nullable()->comment('추가 메타데이터');

            /**
             * 심각도
             *
             * 로그의 중요도와 위험도를 분류합니다.
             * 알림 시스템과 우선순위 관리에 활용됩니다.
             *
             * 심각도 레벨:
             * - low: 일반적인 작업, 정보 제공 목적
             * - medium: 일반적인 관리 작업, 모니터링 대상
             * - high: 중요 작업, 즉시 검토 필요
             * - critical: 위험한 작업, 즉시 대응 필요
             *
             * 도메인 지식:
             * - 우선순위 관리: 중요도에 따른 로그 처리 우선순위
             * - 알림 시스템: 심각도별 차별화된 알림 발송
             * - 리소스 관리: 시스템 리소스의 효율적 사용
             * - 위험 관리: 위험한 작업의 즉시 탐지 및 대응
             * - 감사 효율성: 중요한 로그에 집중한 감사 수행
             */
            $table->enum('severity', ['low', 'medium', 'high', 'critical'])->default('medium')->comment('심각도');

            /**
             * 영향받은 레코드 수
             *
             * 대량 작업에서 영향받은 레코드의 수를 기록합니다.
             * bulk operations의 규모와 영향도를 파악합니다.
             *
             * 도메인 지식:
             * - 영향도 평가: 대량 작업의 시스템 영향도 분석
             * - 성능 모니터링: 대량 작업의 성능 영향 추적
             * - 위험 관리: 대량 삭제 등 위험한 작업의 규모 파악
             * - 리소스 계획: 대량 작업에 필요한 리소스 예측
             * - 복구 계획: 대량 작업 실패 시 복구 범위 결정
             */
            $table->integer('affected_count')->nullable()->comment('영향받은 레코드 수 (bulk operations)');

            $table->timestamps();

            /**
             * 성능 최적화를 위한 인덱스
             *
             * 자주 조회되는 컬럼 조합에 인덱스를 설정하여 쿼리 성능을 향상시킵니다.
             *
             * 인덱스 설명:
             * - admin_id + created_at: 특정 관리자의 시간별 활동 조회 최적화
             * - action + created_at: 특정 액션의 시간별 통계 조회 최적화
             * - table_name + record_id: 특정 테이블의 특정 레코드 변경 이력 조회 최적화
             * - severity + created_at: 심각도별 시간별 로그 조회 최적화
             * - ip_address: IP 주소별 활동 조회 최적화
             * - created_at: 시간순 로그 조회 최적화
             *
             * 도메인 지식:
             * - 쿼리 성능: 자주 사용되는 조회 패턴에 최적화된 인덱스
             * - 감사 효율성: 빠른 로그 검색으로 감사 작업 효율성 향상
             * - 모니터링 성능: 실시간 모니터링 시스템의 성능 보장
             * - 분석 도구: 로그 분석 도구의 빠른 데이터 접근 지원
             */
            $table->index(['admin_id', 'created_at']);
            $table->index(['action', 'created_at']);
            $table->index(['table_name', 'record_id']);
            $table->index(['severity', 'created_at']);
            $table->index('ip_address');
            $table->index('created_at');

            /**
             * 데이터 무결성을 위한 외래키 제약조건
             *
             * admin_id가 admin_emails 테이블의 유효한 ID를 참조하도록 보장합니다.
             * 관리자가 삭제되면 관련된 모든 감사 로그도 함께 삭제됩니다.
             *
             * 도메인 지식:
             * - 데이터 무결성: 존재하지 않는 관리자에 대한 로그 방지
             * - 참조 무결성: 관리자 삭제 시 관련 로그의 일관성 보장
             * - 감사 추적: 관리자 계정 삭제 시에도 활동 이력 보존
             * - 보안 정책: 관리자 계정 관리와 로그 관리의 연동
             */
            $table->foreign('admin_id')->references('id')->on('admin_emails')->onDelete('cascade');
        });
    }

    /**
     * 관리자 감사 로그 테이블 삭제
     *
     * 이 메서드는 마이그레이션을 롤백할 때 호출됩니다.
     * 테이블과 관련된 모든 데이터가 영구적으로 삭제됩니다.
     *
     * 주의사항:
     * - 감사 로그는 법적 요구사항으로 장기 보관이 필요할 수 있음
     * - 롤백 전에 중요한 로그 데이터의 백업을 권장
     * - 프로덕션 환경에서는 신중한 롤백 결정 필요
     *
     * 도메인 지식:
     * - 데이터 보존: 감사 로그는 규정 준수를 위해 보존 기간이 있음
     * - 법적 요구사항: 특정 기간 동안의 로그 보존 의무
     * - 보안 정책: 로그 삭제 시 보안 정책 준수 필요
     * - 복구 계획: 롤백 후 데이터 복구 방안 마련
     */
    public function down(): void
    {
        Schema::dropIfExists('admin_audit_logs');
    }
};
